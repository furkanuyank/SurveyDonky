// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyApp.Contexts;

namespace SurveyApp.Migrations.Test
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("test")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SurveyApp.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Mail")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("WillPublished")
                        .HasColumnType("int")
                        .HasColumnName("will_published");

                    b.Property<int>("WillSend")
                        .HasColumnType("int")
                        .HasColumnName("will_send");

                    b.HasKey("TestId");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestAnswer", b =>
                {
                    b.Property<int>("TestAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("answer_text");

                    b.Property<int>("Choice")
                        .HasColumnType("int")
                        .HasColumnName("choice");

                    b.Property<int>("ChoiceIndex")
                        .HasColumnType("int")
                        .HasColumnName("choice_index");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("TestAnswerId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestPollster", b =>
                {
                    b.Property<int>("TestPollsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pollster_id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Correct")
                        .HasColumnType("int")
                        .HasColumnName("correct");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("SchoolId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("school_id");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<int>("Wrong")
                        .HasColumnType("int")
                        .HasColumnName("wrong");

                    b.HasKey("TestPollsterId");

                    b.HasIndex("TestId");

                    b.ToTable("pollsters");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestQuestion", b =>
                {
                    b.Property<int>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("int")
                        .HasColumnName("correct_answer");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("question_text");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.HasKey("TestQuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestAnswer", b =>
                {
                    b.HasOne("SurveyApp.Entities.TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .HasConstraintName("t_question_answer_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestPollster", b =>
                {
                    b.HasOne("SurveyApp.Entities.Test", "Test")
                        .WithMany("TestPollsters")
                        .HasForeignKey("TestId")
                        .HasConstraintName("test_pollster_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestQuestion", b =>
                {
                    b.HasOne("SurveyApp.Entities.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .HasConstraintName("test_question_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SurveyApp.Entities.Test", b =>
                {
                    b.Navigation("TestPollsters");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("SurveyApp.Entities.TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
