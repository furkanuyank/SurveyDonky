@model GetTestResultModel
@{
    string[] lines;
}
<h2 class="dark-theme-texts">Testin Adı: @Model.Test.Name</h2>
<h4 class="dark-theme-texts">Açıklama: @Model.Test.Description</h4>
<br />
@{ int control = 0;
    string[,] answerMap = new string[,] { { "0", "A" }, { "1", "B" }, { "2", "C" }, { "3", "D" }, { "4", "E" } };
    int size = Model.Answers[0].Count;
}

@for (int i = 0; i < size; i++)
{
    control += Model.Answers[0][i].Choice;
}


@if (control == 0)
{
    <h2 class="dark-theme-texts">Bu teste katılım olmamış</h2>
}

else
{
    List<List<int>> ints = new List<List<int>>();

    for (int i = 0; i < Model.Answers.Count; i++)
    {
        List<int> tempInts = new List<int>();
        int total = 0;
        int correct = Model.Answers[i][Model.Questions[i].CorrectAnswer].Choice;
        int wrong;
        for (int j = 0; j < Model.Answers[i].Count; j++)
        {

            total += Model.Answers[i][j].Choice;

        }
        wrong = total - correct;
        tempInts.Add(correct);
        tempInts.Add(wrong);
        ints.Add(tempInts);
    }


    for (int i = 0; i < Model.Questions.Count; i++)
    {

        <div id="@i">
            <label id="Soru-@(i + 1)" class="dark-theme-texts">
                @(i + 1)) <br />
                @{
                    lines = Model.Questions[i].QuestionText.Split("\n");
                    foreach (var line in lines)
                    {
                        <label class="form-check-label dark-theme-texts" style="word-wrap: break-word">@line</label>
                        <br />
                    }
                }
            </label>
            <br />
        </div>

        <div id="@i">
            <label id="Soru-@(i + 1)" class="dark-theme-texts">
                Doğru Cevap @answerMap[Model.Questions[i].CorrectAnswer, 1])
                @{
                    lines = Model.Answers[i][Model.Questions[i].CorrectAnswer].AnswerText.Split("\n");
                    foreach (var line in lines)
                    {
                        <label class="form-check-label dark-theme-texts" style="word-wrap: break-word;font-size:1rem;">@line</label>
                        <br />
                    }
                }
            </label>
            <br />
        </div>
        string id = "myDiv" + i;

        <div id="@id" style="background-color: #252526"></div>
        <script>
        var data = [{
            values: JSON.parse('@Html.Raw(Json.Serialize(ints[i]))'),
            labels: ["Doğru","Yanlış"],
            type: 'pie',
            marker: {
                colors: [
                    '#56669D',
                    '#FA9490'
                ]
            }
        }];

        var layout = {
            height: 400,
            width: 500,
             paper_bgcolor: "#252526",
            font: {
                color: 'rgb(223,223,223)'
            }
        };

        Plotly.newPlot("myDiv"+"@i", data, layout);
        </script>
    }
}
<br />
<a asp-action="Index" asp-controller="Test" asp-area="" class="btn dark-theme-texts n">Geri Dön</a>

<style>
    .dark-theme-texts {
        color: rgb(223,223,223);
    }

    .p {
        background-color: #495057;
        border-color: #0093ff;
    }

        .p:hover {
            color: #0093ff;
        }

    .n {
        background-color: #495057;
        border-color: #b5a800;
    }

        .n:hover {
            color: #b5a800;
        }
</style>
